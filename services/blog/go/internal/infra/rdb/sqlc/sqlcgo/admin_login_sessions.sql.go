// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: admin_login_sessions.sql

package sqlcgo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAdminLoginSession = `-- name: CreateAdminLoginSession :exec
INSERT INTO admin_login_sessions(id, created_at, expired_at) VALUES ($1, $2, $3)
`

type CreateAdminLoginSessionParams struct {
	ID        uuid.UUID
	CreatedAt pgtype.Timestamp
	ExpiredAt pgtype.Timestamp
}

func (q *Queries) CreateAdminLoginSession(ctx context.Context, arg CreateAdminLoginSessionParams) error {
	_, err := q.db.Exec(ctx, createAdminLoginSession, arg.ID, arg.CreatedAt, arg.ExpiredAt)
	return err
}

const readAdminLoginSessionByID = `-- name: ReadAdminLoginSessionByID :one
SELECT id, expired_at FROM admin_login_sessions WHERE id = $1 AND expired_at >= $2
`

type ReadAdminLoginSessionByIDParams struct {
	ID        uuid.UUID
	ExpiredAt pgtype.Timestamp
}

type ReadAdminLoginSessionByIDRow struct {
	ID        uuid.UUID
	ExpiredAt pgtype.Timestamp
}

func (q *Queries) ReadAdminLoginSessionByID(ctx context.Context, arg ReadAdminLoginSessionByIDParams) (ReadAdminLoginSessionByIDRow, error) {
	row := q.db.QueryRow(ctx, readAdminLoginSessionByID, arg.ID, arg.ExpiredAt)
	var i ReadAdminLoginSessionByIDRow
	err := row.Scan(&i.ID, &i.ExpiredAt)
	return i, err
}
