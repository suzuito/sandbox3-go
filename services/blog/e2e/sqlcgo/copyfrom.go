// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlcgo

import (
	"context"
)

// iteratorForCreateArticlesForTest implements pgx.CopyFromSource.
type iteratorForCreateArticlesForTest struct {
	rows                 []CreateArticlesForTestParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateArticlesForTest) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateArticlesForTest) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Title,
		r.rows[0].PublishedAt,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
	}, nil
}

func (r iteratorForCreateArticlesForTest) Err() error {
	return nil
}

func (q *Queries) CreateArticlesForTest(ctx context.Context, arg []CreateArticlesForTestParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"articles"}, []string{"id", "title", "published_at", "created_at", "updated_at"}, &iteratorForCreateArticlesForTest{rows: arg})
}
