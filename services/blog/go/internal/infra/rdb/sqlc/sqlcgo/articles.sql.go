// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: articles.sql

package sqlcgo

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const readArticlesByIDs = `-- name: ReadArticlesByIDs :many
SELECT
  articles.id AS id,
  articles.title AS title,
  articles.published_at AS published_at,
  array_agg(tags.id)::uuid[] AS tag_ids,
  array_agg(tags.name)::text[] AS tag_names
FROM articles
LEFT JOIN rel_articles_tags ON articles.id = rel_articles_tags.article_id
LEFT JOIN tags ON tags.id = rel_articles_tags.tag_id AND tags.deleted_at IS NULL
WHERE articles.id = ANY($1::uuid[]) AND articles.deleted_at IS NULL
GROUP BY articles.id, articles.title, articles.published_at
`

type ReadArticlesByIDsRow struct {
	ID          uuid.UUID
	Title       string
	PublishedAt pgtype.Timestamp
	TagIds      []uuid.UUID
	TagNames    []string
}

func (q *Queries) ReadArticlesByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]ReadArticlesByIDsRow, error) {
	rows, err := q.db.Query(ctx, readArticlesByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadArticlesByIDsRow
	for rows.Next() {
		var i ReadArticlesByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PublishedAt,
			&i.TagIds,
			&i.TagNames,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
