// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: copyfrom.go

package sqlcgo

import (
	"context"
)

// iteratorForCreateArticles implements pgx.CopyFromSource.
type iteratorForCreateArticles struct {
	rows                 []CreateArticlesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateArticles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateArticles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Title,
		r.rows[0].PublishedAt,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
		r.rows[0].DeletedAt,
	}, nil
}

func (r iteratorForCreateArticles) Err() error {
	return nil
}

func (q *Queries) CreateArticles(ctx context.Context, arg []CreateArticlesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"articles"}, []string{"id", "title", "published_at", "created_at", "updated_at", "deleted_at"}, &iteratorForCreateArticles{rows: arg})
}

// iteratorForCreateRelArticlesTags implements pgx.CopyFromSource.
type iteratorForCreateRelArticlesTags struct {
	rows                 []CreateRelArticlesTagsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateRelArticlesTags) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateRelArticlesTags) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ArticleID,
		r.rows[0].TagID,
	}, nil
}

func (r iteratorForCreateRelArticlesTags) Err() error {
	return nil
}

func (q *Queries) CreateRelArticlesTags(ctx context.Context, arg []CreateRelArticlesTagsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"rel_articles_tags"}, []string{"article_id", "tag_id"}, &iteratorForCreateRelArticlesTags{rows: arg})
}

// iteratorForCreateTags implements pgx.CopyFromSource.
type iteratorForCreateTags struct {
	rows                 []CreateTagsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTags) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTags) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Name,
		r.rows[0].CreatedAt,
		r.rows[0].UpdatedAt,
		r.rows[0].DeletedAt,
	}, nil
}

func (r iteratorForCreateTags) Err() error {
	return nil
}

func (q *Queries) CreateTags(ctx context.Context, arg []CreateTagsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"tags"}, []string{"id", "name", "created_at", "updated_at", "deleted_at"}, &iteratorForCreateTags{rows: arg})
}
